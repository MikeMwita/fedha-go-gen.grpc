// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: dbserver.proto

package db

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DbService_CreateExpense_FullMethodName          = "/db.DbService/CreateExpense"
	DbService_GetExpense_FullMethodName             = "/db.DbService/GetExpense"
	DbService_UpdateExpense_FullMethodName          = "/db.DbService/UpdateExpense"
	DbService_DeleteExpense_FullMethodName          = "/db.DbService/DeleteExpense"
	DbService_CreateIncome_FullMethodName           = "/db.DbService/CreateIncome"
	DbService_GetIncome_FullMethodName              = "/db.DbService/GetIncome"
	DbService_UpdateIncome_FullMethodName           = "/db.DbService/UpdateIncome"
	DbService_DeleteIncome_FullMethodName           = "/db.DbService/DeleteIncome"
	DbService_GetRemainingBalance_FullMethodName    = "/db.DbService/GetRemainingBalance"
	DbService_GenerateMonthlySummary_FullMethodName = "/db.DbService/GenerateMonthlySummary"
	DbService_RegisterUser_FullMethodName           = "/db.DbService/RegisterUser"
	DbService_UpdateUser_FullMethodName             = "/db.DbService/UpdateUser"
	DbService_GetPagedUsers_FullMethodName          = "/db.DbService/GetPagedUsers"
	DbService_GetUserByField_FullMethodName         = "/db.DbService/GetUserByField"
	DbService_GetUserByUsername_FullMethodName      = "/db.DbService/GetUserByUsername"
	DbService_GetUserByID_FullMethodName            = "/db.DbService/GetUserByID"
	DbService_SaveUser_FullMethodName               = "/db.DbService/SaveUser"
)

// DbServiceClient is the client API for DbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbServiceClient interface {
	CreateExpense(ctx context.Context, in *ExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error)
	GetExpense(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error)
	UpdateExpense(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error)
	DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error)
	// INCOMES
	CreateIncome(ctx context.Context, in *CreateIncomeRequest, opts ...grpc.CallOption) (*CreateIncomeResponse, error)
	GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*GetIncomeResponse, error)
	UpdateIncome(ctx context.Context, in *UpdateIncomeRequest, opts ...grpc.CallOption) (*UpdateIncomeResponse, error)
	DeleteIncome(ctx context.Context, in *DeleteIncomeRequest, opts ...grpc.CallOption) (*DeleteIncomeResponse, error)
	// BALANCES
	GetRemainingBalance(ctx context.Context, in *RemainingBalanceRequest, opts ...grpc.CallOption) (*RemainingBalanceResponse, error)
	// MONTHLY SUMMARY
	GenerateMonthlySummary(ctx context.Context, in *MonthlySummaryRequest, opts ...grpc.CallOption) (*MonthlySummaryResponse, error)
	RegisterUser(ctx context.Context, in *RegUserReq, opts ...grpc.CallOption) (*RegUserRes, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error)
	GetPagedUsers(ctx context.Context, in *GetPagedUsersReq, opts ...grpc.CallOption) (*GetPagedUsersRes, error)
	GetUserByField(ctx context.Context, in *GetByfieldReq, opts ...grpc.CallOption) (*GetByfieldRes, error)
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*RegUserRes, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*RegUserRes, error)
	SaveUser(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*User, error)
}

type dbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbServiceClient(cc grpc.ClientConnInterface) DbServiceClient {
	return &dbServiceClient{cc}
}

func (c *dbServiceClient) CreateExpense(ctx context.Context, in *ExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error) {
	out := new(ExpenseResponse)
	err := c.cc.Invoke(ctx, DbService_CreateExpense_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetExpense(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error) {
	out := new(ExpenseResponse)
	err := c.cc.Invoke(ctx, DbService_GetExpense_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) UpdateExpense(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error) {
	out := new(ExpenseResponse)
	err := c.cc.Invoke(ctx, DbService_UpdateExpense_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error) {
	out := new(DeleteExpenseResponse)
	err := c.cc.Invoke(ctx, DbService_DeleteExpense_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) CreateIncome(ctx context.Context, in *CreateIncomeRequest, opts ...grpc.CallOption) (*CreateIncomeResponse, error) {
	out := new(CreateIncomeResponse)
	err := c.cc.Invoke(ctx, DbService_CreateIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*GetIncomeResponse, error) {
	out := new(GetIncomeResponse)
	err := c.cc.Invoke(ctx, DbService_GetIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) UpdateIncome(ctx context.Context, in *UpdateIncomeRequest, opts ...grpc.CallOption) (*UpdateIncomeResponse, error) {
	out := new(UpdateIncomeResponse)
	err := c.cc.Invoke(ctx, DbService_UpdateIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) DeleteIncome(ctx context.Context, in *DeleteIncomeRequest, opts ...grpc.CallOption) (*DeleteIncomeResponse, error) {
	out := new(DeleteIncomeResponse)
	err := c.cc.Invoke(ctx, DbService_DeleteIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetRemainingBalance(ctx context.Context, in *RemainingBalanceRequest, opts ...grpc.CallOption) (*RemainingBalanceResponse, error) {
	out := new(RemainingBalanceResponse)
	err := c.cc.Invoke(ctx, DbService_GetRemainingBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GenerateMonthlySummary(ctx context.Context, in *MonthlySummaryRequest, opts ...grpc.CallOption) (*MonthlySummaryResponse, error) {
	out := new(MonthlySummaryResponse)
	err := c.cc.Invoke(ctx, DbService_GenerateMonthlySummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RegisterUser(ctx context.Context, in *RegUserReq, opts ...grpc.CallOption) (*RegUserRes, error) {
	out := new(RegUserRes)
	err := c.cc.Invoke(ctx, DbService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error) {
	out := new(UpdateUserRes)
	err := c.cc.Invoke(ctx, DbService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetPagedUsers(ctx context.Context, in *GetPagedUsersReq, opts ...grpc.CallOption) (*GetPagedUsersRes, error) {
	out := new(GetPagedUsersRes)
	err := c.cc.Invoke(ctx, DbService_GetPagedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetUserByField(ctx context.Context, in *GetByfieldReq, opts ...grpc.CallOption) (*GetByfieldRes, error) {
	out := new(GetByfieldRes)
	err := c.cc.Invoke(ctx, DbService_GetUserByField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*RegUserRes, error) {
	out := new(RegUserRes)
	err := c.cc.Invoke(ctx, DbService_GetUserByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*RegUserRes, error) {
	out := new(RegUserRes)
	err := c.cc.Invoke(ctx, DbService_GetUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) SaveUser(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, DbService_SaveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServiceServer is the server API for DbService service.
// All implementations must embed UnimplementedDbServiceServer
// for forward compatibility
type DbServiceServer interface {
	CreateExpense(context.Context, *ExpenseRequest) (*ExpenseResponse, error)
	GetExpense(context.Context, *GetExpenseRequest) (*ExpenseResponse, error)
	UpdateExpense(context.Context, *UpdateExpenseRequest) (*ExpenseResponse, error)
	DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error)
	// INCOMES
	CreateIncome(context.Context, *CreateIncomeRequest) (*CreateIncomeResponse, error)
	GetIncome(context.Context, *GetIncomeRequest) (*GetIncomeResponse, error)
	UpdateIncome(context.Context, *UpdateIncomeRequest) (*UpdateIncomeResponse, error)
	DeleteIncome(context.Context, *DeleteIncomeRequest) (*DeleteIncomeResponse, error)
	// BALANCES
	GetRemainingBalance(context.Context, *RemainingBalanceRequest) (*RemainingBalanceResponse, error)
	// MONTHLY SUMMARY
	GenerateMonthlySummary(context.Context, *MonthlySummaryRequest) (*MonthlySummaryResponse, error)
	RegisterUser(context.Context, *RegUserReq) (*RegUserRes, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRes, error)
	GetPagedUsers(context.Context, *GetPagedUsersReq) (*GetPagedUsersRes, error)
	GetUserByField(context.Context, *GetByfieldReq) (*GetByfieldRes, error)
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*RegUserRes, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*RegUserRes, error)
	SaveUser(context.Context, *SaveUserRequest) (*User, error)
	mustEmbedUnimplementedDbServiceServer()
}

// UnimplementedDbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDbServiceServer struct {
}

func (UnimplementedDbServiceServer) CreateExpense(context.Context, *ExpenseRequest) (*ExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpense not implemented")
}
func (UnimplementedDbServiceServer) GetExpense(context.Context, *GetExpenseRequest) (*ExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpense not implemented")
}
func (UnimplementedDbServiceServer) UpdateExpense(context.Context, *UpdateExpenseRequest) (*ExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExpense not implemented")
}
func (UnimplementedDbServiceServer) DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpense not implemented")
}
func (UnimplementedDbServiceServer) CreateIncome(context.Context, *CreateIncomeRequest) (*CreateIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncome not implemented")
}
func (UnimplementedDbServiceServer) GetIncome(context.Context, *GetIncomeRequest) (*GetIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncome not implemented")
}
func (UnimplementedDbServiceServer) UpdateIncome(context.Context, *UpdateIncomeRequest) (*UpdateIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncome not implemented")
}
func (UnimplementedDbServiceServer) DeleteIncome(context.Context, *DeleteIncomeRequest) (*DeleteIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncome not implemented")
}
func (UnimplementedDbServiceServer) GetRemainingBalance(context.Context, *RemainingBalanceRequest) (*RemainingBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemainingBalance not implemented")
}
func (UnimplementedDbServiceServer) GenerateMonthlySummary(context.Context, *MonthlySummaryRequest) (*MonthlySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMonthlySummary not implemented")
}
func (UnimplementedDbServiceServer) RegisterUser(context.Context, *RegUserReq) (*RegUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedDbServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDbServiceServer) GetPagedUsers(context.Context, *GetPagedUsersReq) (*GetPagedUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagedUsers not implemented")
}
func (UnimplementedDbServiceServer) GetUserByField(context.Context, *GetByfieldReq) (*GetByfieldRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByField not implemented")
}
func (UnimplementedDbServiceServer) GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*RegUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedDbServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*RegUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedDbServiceServer) SaveUser(context.Context, *SaveUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedDbServiceServer) mustEmbedUnimplementedDbServiceServer() {}

// UnsafeDbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbServiceServer will
// result in compilation errors.
type UnsafeDbServiceServer interface {
	mustEmbedUnimplementedDbServiceServer()
}

func RegisterDbServiceServer(s grpc.ServiceRegistrar, srv DbServiceServer) {
	s.RegisterService(&DbService_ServiceDesc, srv)
}

func _DbService_CreateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).CreateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_CreateExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).CreateExpense(ctx, req.(*ExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetExpense(ctx, req.(*GetExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_UpdateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).UpdateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_UpdateExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).UpdateExpense(ctx, req.(*UpdateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_DeleteExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).DeleteExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_DeleteExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).DeleteExpense(ctx, req.(*DeleteExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_CreateIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).CreateIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_CreateIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).CreateIncome(ctx, req.(*CreateIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetIncome(ctx, req.(*GetIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_UpdateIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).UpdateIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_UpdateIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).UpdateIncome(ctx, req.(*UpdateIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_DeleteIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).DeleteIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_DeleteIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).DeleteIncome(ctx, req.(*DeleteIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetRemainingBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemainingBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetRemainingBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetRemainingBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetRemainingBalance(ctx, req.(*RemainingBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GenerateMonthlySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthlySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GenerateMonthlySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GenerateMonthlySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GenerateMonthlySummary(ctx, req.(*MonthlySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RegisterUser(ctx, req.(*RegUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetPagedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPagedUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetPagedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetPagedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetPagedUsers(ctx, req.(*GetPagedUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetUserByField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByfieldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetUserByField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetUserByField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetUserByField(ctx, req.(*GetByfieldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_SaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).SaveUser(ctx, req.(*SaveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbService_ServiceDesc is the grpc.ServiceDesc for DbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.DbService",
	HandlerType: (*DbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpense",
			Handler:    _DbService_CreateExpense_Handler,
		},
		{
			MethodName: "GetExpense",
			Handler:    _DbService_GetExpense_Handler,
		},
		{
			MethodName: "UpdateExpense",
			Handler:    _DbService_UpdateExpense_Handler,
		},
		{
			MethodName: "DeleteExpense",
			Handler:    _DbService_DeleteExpense_Handler,
		},
		{
			MethodName: "CreateIncome",
			Handler:    _DbService_CreateIncome_Handler,
		},
		{
			MethodName: "GetIncome",
			Handler:    _DbService_GetIncome_Handler,
		},
		{
			MethodName: "UpdateIncome",
			Handler:    _DbService_UpdateIncome_Handler,
		},
		{
			MethodName: "DeleteIncome",
			Handler:    _DbService_DeleteIncome_Handler,
		},
		{
			MethodName: "GetRemainingBalance",
			Handler:    _DbService_GetRemainingBalance_Handler,
		},
		{
			MethodName: "GenerateMonthlySummary",
			Handler:    _DbService_GenerateMonthlySummary_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _DbService_RegisterUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DbService_UpdateUser_Handler,
		},
		{
			MethodName: "GetPagedUsers",
			Handler:    _DbService_GetPagedUsers_Handler,
		},
		{
			MethodName: "GetUserByField",
			Handler:    _DbService_GetUserByField_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _DbService_GetUserByUsername_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _DbService_GetUserByID_Handler,
		},
		{
			MethodName: "SaveUser",
			Handler:    _DbService_SaveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbserver.proto",
}
