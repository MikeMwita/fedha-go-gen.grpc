// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: expense_server.proto

package expense

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpenseServiceClient is the client API for ExpenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenseServiceClient interface {
	CreateExpense(ctx context.Context, in *ExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error)
	GetExpense(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error)
	UpdateExpense(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error)
	DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error)
	// INCOMES
	CreateIncome(ctx context.Context, in *CreateIncomeRequest, opts ...grpc.CallOption) (*CreateIncomeResponse, error)
	GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*GetIncomeResponse, error)
	UpdateIncome(ctx context.Context, in *UpdateIncomeRequest, opts ...grpc.CallOption) (*UpdateIncomeResponse, error)
	DeleteIncome(ctx context.Context, in *DeleteIncomeRequest, opts ...grpc.CallOption) (*DeleteIncomeResponse, error)
	// BALANCES
	GetRemainingBalance(ctx context.Context, in *RemainingBalanceRequest, opts ...grpc.CallOption) (*RemainingBalanceResponse, error)
	// MONTHLY SUMMARY
	GenerateMonthlySummary(ctx context.Context, in *MonthlySummaryRequest, opts ...grpc.CallOption) (*MonthlySummaryResponse, error)
}

type expenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseServiceClient(cc grpc.ClientConnInterface) ExpenseServiceClient {
	return &expenseServiceClient{cc}
}

func (c *expenseServiceClient) CreateExpense(ctx context.Context, in *ExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error) {
	out := new(ExpenseResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/CreateExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetExpense(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error) {
	out := new(ExpenseResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/GetExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) UpdateExpense(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*ExpenseResponse, error) {
	out := new(ExpenseResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/UpdateExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error) {
	out := new(DeleteExpenseResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/DeleteExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) CreateIncome(ctx context.Context, in *CreateIncomeRequest, opts ...grpc.CallOption) (*CreateIncomeResponse, error) {
	out := new(CreateIncomeResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/CreateIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*GetIncomeResponse, error) {
	out := new(GetIncomeResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/GetIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) UpdateIncome(ctx context.Context, in *UpdateIncomeRequest, opts ...grpc.CallOption) (*UpdateIncomeResponse, error) {
	out := new(UpdateIncomeResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/UpdateIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) DeleteIncome(ctx context.Context, in *DeleteIncomeRequest, opts ...grpc.CallOption) (*DeleteIncomeResponse, error) {
	out := new(DeleteIncomeResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/DeleteIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetRemainingBalance(ctx context.Context, in *RemainingBalanceRequest, opts ...grpc.CallOption) (*RemainingBalanceResponse, error) {
	out := new(RemainingBalanceResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/GetRemainingBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GenerateMonthlySummary(ctx context.Context, in *MonthlySummaryRequest, opts ...grpc.CallOption) (*MonthlySummaryResponse, error) {
	out := new(MonthlySummaryResponse)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/GenerateMonthlySummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseServiceServer is the server API for ExpenseService service.
// All implementations must embed UnimplementedExpenseServiceServer
// for forward compatibility
type ExpenseServiceServer interface {
	CreateExpense(context.Context, *ExpenseRequest) (*ExpenseResponse, error)
	GetExpense(context.Context, *GetExpenseRequest) (*ExpenseResponse, error)
	UpdateExpense(context.Context, *UpdateExpenseRequest) (*ExpenseResponse, error)
	DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error)
	// INCOMES
	CreateIncome(context.Context, *CreateIncomeRequest) (*CreateIncomeResponse, error)
	GetIncome(context.Context, *GetIncomeRequest) (*GetIncomeResponse, error)
	UpdateIncome(context.Context, *UpdateIncomeRequest) (*UpdateIncomeResponse, error)
	DeleteIncome(context.Context, *DeleteIncomeRequest) (*DeleteIncomeResponse, error)
	// BALANCES
	GetRemainingBalance(context.Context, *RemainingBalanceRequest) (*RemainingBalanceResponse, error)
	// MONTHLY SUMMARY
	GenerateMonthlySummary(context.Context, *MonthlySummaryRequest) (*MonthlySummaryResponse, error)
	mustEmbedUnimplementedExpenseServiceServer()
}

// UnimplementedExpenseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpenseServiceServer struct {
}

func (UnimplementedExpenseServiceServer) CreateExpense(context.Context, *ExpenseRequest) (*ExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpense not implemented")
}
func (UnimplementedExpenseServiceServer) GetExpense(context.Context, *GetExpenseRequest) (*ExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpense not implemented")
}
func (UnimplementedExpenseServiceServer) UpdateExpense(context.Context, *UpdateExpenseRequest) (*ExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExpense not implemented")
}
func (UnimplementedExpenseServiceServer) DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpense not implemented")
}
func (UnimplementedExpenseServiceServer) CreateIncome(context.Context, *CreateIncomeRequest) (*CreateIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncome not implemented")
}
func (UnimplementedExpenseServiceServer) GetIncome(context.Context, *GetIncomeRequest) (*GetIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncome not implemented")
}
func (UnimplementedExpenseServiceServer) UpdateIncome(context.Context, *UpdateIncomeRequest) (*UpdateIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncome not implemented")
}
func (UnimplementedExpenseServiceServer) DeleteIncome(context.Context, *DeleteIncomeRequest) (*DeleteIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncome not implemented")
}
func (UnimplementedExpenseServiceServer) GetRemainingBalance(context.Context, *RemainingBalanceRequest) (*RemainingBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemainingBalance not implemented")
}
func (UnimplementedExpenseServiceServer) GenerateMonthlySummary(context.Context, *MonthlySummaryRequest) (*MonthlySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMonthlySummary not implemented")
}
func (UnimplementedExpenseServiceServer) mustEmbedUnimplementedExpenseServiceServer() {}

// UnsafeExpenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseServiceServer will
// result in compilation errors.
type UnsafeExpenseServiceServer interface {
	mustEmbedUnimplementedExpenseServiceServer()
}

func RegisterExpenseServiceServer(s grpc.ServiceRegistrar, srv ExpenseServiceServer) {
	s.RegisterService(&ExpenseService_ServiceDesc, srv)
}

func _ExpenseService_CreateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).CreateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/CreateExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).CreateExpense(ctx, req.(*ExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/GetExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetExpense(ctx, req.(*GetExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_UpdateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).UpdateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/UpdateExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).UpdateExpense(ctx, req.(*UpdateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_DeleteExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/DeleteExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, req.(*DeleteExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_CreateIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).CreateIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/CreateIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).CreateIncome(ctx, req.(*CreateIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/GetIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetIncome(ctx, req.(*GetIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_UpdateIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).UpdateIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/UpdateIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).UpdateIncome(ctx, req.(*UpdateIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_DeleteIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).DeleteIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/DeleteIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).DeleteIncome(ctx, req.(*DeleteIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetRemainingBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemainingBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetRemainingBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/GetRemainingBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetRemainingBalance(ctx, req.(*RemainingBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GenerateMonthlySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthlySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GenerateMonthlySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/GenerateMonthlySummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GenerateMonthlySummary(ctx, req.(*MonthlySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenseService_ServiceDesc is the grpc.ServiceDesc for ExpenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expense.ExpenseService",
	HandlerType: (*ExpenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpense",
			Handler:    _ExpenseService_CreateExpense_Handler,
		},
		{
			MethodName: "GetExpense",
			Handler:    _ExpenseService_GetExpense_Handler,
		},
		{
			MethodName: "UpdateExpense",
			Handler:    _ExpenseService_UpdateExpense_Handler,
		},
		{
			MethodName: "DeleteExpense",
			Handler:    _ExpenseService_DeleteExpense_Handler,
		},
		{
			MethodName: "CreateIncome",
			Handler:    _ExpenseService_CreateIncome_Handler,
		},
		{
			MethodName: "GetIncome",
			Handler:    _ExpenseService_GetIncome_Handler,
		},
		{
			MethodName: "UpdateIncome",
			Handler:    _ExpenseService_UpdateIncome_Handler,
		},
		{
			MethodName: "DeleteIncome",
			Handler:    _ExpenseService_DeleteIncome_Handler,
		},
		{
			MethodName: "GetRemainingBalance",
			Handler:    _ExpenseService_GetRemainingBalance_Handler,
		},
		{
			MethodName: "GenerateMonthlySummary",
			Handler:    _ExpenseService_GenerateMonthlySummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expense_server.proto",
}
